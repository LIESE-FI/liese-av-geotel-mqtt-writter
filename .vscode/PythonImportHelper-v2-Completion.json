[
    {
        "label": "DatabaseConnection",
        "importPath": "Services",
        "description": "Services",
        "isExtraImport": true,
        "detail": "Services",
        "documentation": {}
    },
    {
        "label": "paho.mqtt.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paho.mqtt.client",
        "description": "paho.mqtt.client",
        "detail": "paho.mqtt.client",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "polars",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "polars",
        "description": "polars",
        "detail": "polars",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "MQTTToDatabaseWriter",
        "importPath": "Schemas",
        "description": "Schemas",
        "isExtraImport": true,
        "detail": "Schemas",
        "documentation": {}
    },
    {
        "label": "MQTTToDatabaseWriter",
        "kind": 6,
        "importPath": "src.Schemas.Writer",
        "description": "src.Schemas.Writer",
        "peekOfCode": "class MQTTToDatabaseWriter:\n    \"\"\"\n    A class to write data from an MQTT topic to a database.\n    This class waits for messages on a specified MQTT topic and writes the received data\n    to a database using a provided DatabaseConnection instance.\n    Attributes:\n    - mqtt_client (mqtt.Client): The MQTT client instance.\n    - topic (str): The MQTT topic to subscribe to.\n    - db_connection (DatabaseConnection): The database connection instance.\n    - table_name (str): The name of the database table to write data to.",
        "detail": "src.Schemas.Writer",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "kind": 6,
        "importPath": "src.Services.DatabaseConnection",
        "description": "src.Services.DatabaseConnection",
        "peekOfCode": "class DatabaseConnection:\n    # Initialize the database connection\n    def __init__(self, db_url: str):\n        \"\"\"\n        Initialize the DatabaseConnection with a database URL.\n        Parameters:\n        db_url (str): The database URL to connect to.\n        \"\"\"\n        self.engine = db.create_engine(db_url)\n        self.conn = self.engine.connect()",
        "detail": "src.Services.DatabaseConnection",
        "documentation": {}
    },
    {
        "label": "TOPICS",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "TOPICS = [\"test\"]\ndef __main__():\n    \"\"\"\n    Main function to initialize and run the MQTTToDatabaseWriter.\n    This function loads environment variables, initializes the MQTTToDatabaseWriter with\n    the specified topic, database URL, table name, and columns, and starts the MQTT client loop.\n    Returns:\n    - None\n    \"\"\"\n    # Load environment variables from .env file",
        "detail": "src.main",
        "documentation": {}
    }
]